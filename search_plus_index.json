{"./":{"url":"./","title":"Introduction","keywords":"","body":"Wiki Karlin是一个跨平台的后渗透利用红队框架，旨在为操作员提供协作和用户友好的界面。整体使用Wails，后端使用 Golang，前端用 Vue.js + Naive UI 编写。 [info] 注意 This tool is intended to only be used during research and authorized testing. 此工具仅用于研究和授权测试。 预览 By BKLockly，使用知识共享 署名-相同方式共享 4.0协议发布            更新时间： 2025-01-22 11:33:45 "},"01.快速开始.html":{"url":"01.快速开始.html","title":"01.快速开始","keywords":"","body":"Quick Start 源码可以从Github查看，使用git clone拉取： git clone https://github.com/BKLockly/KarlinC2.git 切换目录进入项目 cd KarlinC2 Server 在启动Server端前，确保包含以下依赖： go gcc MinGW-w64 Wails Garble Goimports Gonut 执行initialize.bat或者initialize.sh初始化环境: Lockly@BK ❯.\\initialize.bat [*] Initializing Karlin... [-] Checking required tools and environments... [-] Checking MinGW-w64... [-] Configuring Go Environment... [-] Checking garble... [-] Checking goimports... [+] Checking gonut... [-] Initializing Go Modules... [-] Tidying Go Modules... [+] Log file was empty and deleted. [+] ======================================== [+] Initialization Completed [+] ======================================== [-] Environment Information: ---------------------------------------- gcc: gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0 go: go version go1.22.3 windows/amd64 garble: mvdan.cc/garble v0.12.1 gonut: gonut version v1.0.0-3 goimports: cmd/goimports@latest is installed ---------------------------------------- [*] Karlin is ready to use 请按任意键继续. . . 如上完成后即可启动server cd ./backend/server go run main.go Client 从release页面获取对应的二进制文件执行即可，自行编译可使用makefile(只适配了windows): make windows-amd64 客户端的编译依赖Wails, 请根据官网文档配置wails以进行编译: wails build 正常进入登录页面，新建配置进行登录，成功登录的配置会自动保存到%UserProfile%\\.karlin\\client\\operators.json By BKLockly，使用知识共享 署名-相同方式共享 4.0协议发布            更新时间： 2025-01-21 22:47:38 "},"02.Server端.html":{"url":"02.Server端.html","title":"02.Server端","keywords":"","body":"Command 使用-h 获取更多帮助 Karlin Framework [Version: 1.1.1] Usage: karlin [flags] karlin [command] Available Commands: completion generate the autocompletion script for the specified shell help Help about any command operator Do operation with operators and exit version Print version and exit Flags: -c, --config string config file path (default \"pkg/config/server.yaml\") -h, --help help for karlin Use \"karlin [command] --help\" for more information about a command. [danger] 注意 初次使用时将根据/backend/server/pkg/config/server.yaml的配置新建默认用户并创建数据库 请于此处修改默认配置： server: host: 127.0.0.1 file: port: 9000 pattern: /files/downloads/ db: name: team.db root: Lockly passwd: 3ty1r86bn 如需针对用户进行操作可以使用operator命令： Lockly@BK ❯ go run main.go operator --help This command allows you to perform operations like adding, deleting, or modifying operators. Usage: karlin operator [flags] karlin operator [command] Available Commands: add Add a new operator delete Delete an existing operator modify Modify an existing operator Flags: -h, --help help for operator Use \"karlin operator [command] --help\" for more information about a command. Lockly@BK ❯ go run main.go operator delete ? Username: Test ? Username: Test Delete Operator Success Lockly@BK ❯ go run main.go operator add ? Username: Agony ? Username: Agony ? Password: ******** ? Password Again: ******** Add Operator Success Lockly@BK ❯ go run main.go operator modify ? Username: Agony ? Username: Agony ? Password: ******** ? Password Again: ******** Modify Operator Success By BKLockly，使用知识共享 署名-相同方式共享 4.0协议发布            更新时间： 2025-01-21 23:50:35 "},"03.配置项.html":{"url":"03.配置项.html","title":"03.配置项","keywords":"","body":"Configuration Server 服务端共有两个配置文件： backend/server/pkg/config/server.yaml: 用于trpc配置 backend/server/trpc_go.yaml: 用于自定义的配置。 Default 针对于Agent的默认配置还在测试，陆续会提供更多自定义配置。 字段 类型 默认值 描述 sleep int 5 休眠时长 jitter float32 0.3 抖动系数 process86 string C:\\windows\\system32\\notepad.exe 32位系统中的牺牲进程 process64 string C:\\Windows\\SysWOW64\\notepad.exe 64位系统中的牺牲进程 anchor string C:\\Windows\\system32\\drivers\\etc\\hosts 修改时间戳的锚定文件 ... ... ... ... 服务端的配置项如下： 字段 类型 默认值 描述 host string localhost 监听地址 file struct 详见 文件服务器-file 文件服务器配置 db struct 详见 数据库-db 数据库配置 timeout int64 1800 最大超时时长 listeners []struct 详见 监听器-listener 监听器配置 ... ... ... ... FileServer 字段 类型 默认值 描述 port int64 9000 监听端口 pattern string /files/downloads/ 访问路径 ... ... ... ... Database 字段 类型 默认值 描述 name string team.db 数据库名称 root string Lockly 初始化用户 password string 3ty1r86bn 用户密码 ... ... ... ... Listener 初始化时将优先读取此处的配置来开启监听器。 字段 类型 默认值 描述 name string default 监听器名称 protocol string QUIC 监听器类型(必须大写，可选DOH,QUIC,KCP,TRPC) port int64 6666 监听端口 addr string localhost 监听地址 description string Default listener 描述 persistence bool true 是否保存到数据库 workingRange string 07:00-23:00 运行时间区间(不在则休眠) killDateStamp string 2025-12-12 终止时间(逾期Agent自动退出) ... ... ... ... 在创建监听器时用可持久化的选项，但也可以在此配置多个监听器。例如： listeners: - name: quic-demo protocol: QUIC port: 6666 addr: 127.0.0.1 persistence: true description: Default workingRange: 7:00-23:00 killDateStamp: 2025-07-25 - name: doh-demo protocol: DOH port: 53 addr: 127.0.0.1 persistence: false description: Default workingRange: 7:00-23:00 killDateStamp: 2025-07-25 Trpc [warning] 💤 不日江湖再见... Client [warning] 💤 不日江湖再见... Common Protobuf 采用protobuf来序列化数据，如需进行修改和扩展, 则在修改后使用更新.pb.go文件: protoc -I . api.proto --go_out=plugins=grpc:. 或者使用trpc命令行工具: trpc create -f --protofile=api.proto --protocol=trpc --rpconly --nogomod --mock=false 如遇报错，请确保执行前已将其加入环境变量中，如下验证： Lockly@BK ❯ protoc --version libprotoc 3.21.12 Lockly@BK ❯ trpc version trpc-group/trpc-cmdline version: v1.0.9 如果没有，使用以下命令配置: go install trpc.group/trpc-go/trpc-cmdline/trpc@latest go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.27.1 go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0 Certificate 自行更新证书, 例如使用自签: openssl genrsa -des3 -out ca.key 2046 #输入两次密码 openssl req -new -key ca.key -out ca.csr # CN HUNAN SHAOYANG MICROLOSS MICROLOSS karlin.com openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt openssl version -d # 找到openssl.cnf文件 例如: /home/lockly/miniforge3/ssl/openssl.cnf openssl genpkey -algorithm RSA -out server.key openssl req -new -nodes -key server.key -out server.csr -days 3650 -config /home/lockly/miniforge3/ssl/openssl.cnf -extensions v3_req openssl x509 -req -days 365 -in server.csr -out server.pem -CA ca.crt -CAkey ca.key -CAcreateserial -extfile /home/lockly/miniforge3/ssl/openssl.cnf -extensions v3_req openssl genpkey -algorithm RSA -out client.key openssl req -new -nodes -key client.key -out client.csr -days 3650 -config /home/lockly/miniforge3/ssl/openssl.cnf -extensions v3_req openssl x509 -req -days 365 -in client.csr -out client.pem -CA ca.crt -CAkey ca.key -CAcreateserial -extfile /home/lockly/miniforge3/ssl/openssl.cnf -extensions v3_req By BKLockly，使用知识共享 署名-相同方式共享 4.0协议发布            更新时间： 2025-01-21 23:28:24 "},"04.Client使用.html":{"url":"04.Client使用.html","title":"04.Client使用","keywords":"","body":"Overview 主机拓扑或Agent Topology用于管理Agent, 此处可见所有未被手动删除的Agent, 默认按登入时间先后来排序，可通过右侧的筛选按钮过滤 以及下面的Event标签用于展示日志信息，以INF,DEB,ERR,三种级别区分。 其左侧的圆点用于切换图形化展示(TODO: 此模式下右键菜单无法使用)，例如: Interaction 可以右键 -> 会话交互进入， 也可直接双击Agent进入。此终端具备命令提示和补全，很多快捷键也是通用的，例如： `ctrl` + `u` # 清空当前输入命令 `ctrl` + `l` # 清屏 ... 左上角按钮双击击切换全屏，右上角显示基本信息以及当前对命令结果处理所使用的编码，另外可以折叠和展开已执行的命令： 正如初始化消息所示，尽量避免高危操作，故高危操作都从Agent中剥离并以反射dll加载，例如hashdump，mimikatz等等 对于一些命令结果的显示也进行了优化，支持以html, table, json, text格式来更直观且方便地展示(图为table)： 对于某些命令结果提供了折叠和复制的选项(编辑功能还在完善中)： HostInfo 旨在获取更加详细的主机信息，为了方便可以一件复制json格式的内容，也可以双击单项复制该内容: 🏴OPSEC 此操作不符合OPSEC，故获取一次后存档以后续调取 {: .block-danger } Screenshot 右键触发的截图可以查看,而终端中执行只返回保存到本地的路径, 一般存储于%UserProfile%\\.karlin\\client\\screenshot\\$AGENTID\\$YEAR\\$MONTH\\$DAY\\$TIME.png FileManager 管理文件, 默认进入Agent所在的目录, 支持上传（可批量，并将修改文件的时间戳）、新建、下载、删除、搜索（仅当前目录下）文件（当然，操作受限于所拥有的权限）。 ProcessMonitor 查看和终止Agent上运行的进程, 并将AV/EDR识别集成于此。表格中可排序、过滤和搜索，同时对于进程进行染色区分： 红色/red：AV/EDR, 对应名称可通过悬浮触发的提示气泡查看 紫色/purple：用于标记当前Agent进程的信息 青色/cyan：用于标识市面上各类浏览器的进程 蓝色/blue：用于标识特殊的进程，比如explorer，Winlogon Comment 提供给用户保存他们从命令输出中复制的代理的重要数据。也是用户为其他测试人员留下注释的位置。这样是一个自由格式的文本字段，可用于保存任何内容。 其他操作请右键Agent进行，列表如下： ├─会话交互 ├─目标管理 │ ├─主机信息 │ ├─文件管理 │ ├─进程监控 │ ├─屏幕截图 ├─执行 │ ├─派生会话 │ │ ├─Meterpreter │ │ └─shellcode注入 │ ├─影子账户 │ ├─关闭Defender │ ├─键盘监听 │ ├─网段探测 │ ├─计划任务 │ └─... ├─常用模块 │ ├─Mimikatz │ ├─Fscan │ ├─Qscan │ └─... ├─常规 │ ├─关机 │ ├─重启 │ ├─锁屏 │ ├─... │ ├──── ├─插件 ├─管理面板 │ ├─凭据管理 │ ├─聊天存储 │ └─... └─会话操作 │ ├─刷新 │ ├─重连 │ ├─颜色标记 │ │ └─Cyan │ │ └─... │ ├─标记断联 │ └─退出 │ ├─退出进程 │ ├─自删除 │ └─删除记录 By BKLockly，使用知识共享 署名-相同方式共享 4.0协议发布            更新时间： 2025-01-21 23:15:47 "},"05.Agent.html":{"url":"05.Agent.html","title":"05.Agent","keywords":"","body":" [info] 注意 在生成Agent前请确保已经创建了监听器 Generation Agent有很多功能和配置项，可在生成界面进行设置： Configuration 对于其中的配置说明如下： 字段 类型 默认值 可选参数 描述 Filename string / / 文件名 Platform string wiindows/amd64 参见支持的平台架构 平台 Args []string / / 参数（保留字段） Sleep int 3 / 休眠时长 Jitter float 0.2 / 抖动系数 OutputType string exe exe, elf, dll, shellcode 输出类型 ShellcodeIndex string bin py, go. rs, cs, c, ps1 shellcode索引 Compiler string go go, garble 编译器 UseUpxAndPatcher bool false true, false 是否使用upx和patcher（仅二进制文件） CompressorAlgorithm int 6 参见压缩算法选项 压缩算法 Stage bool false true, false 是否使用二阶段Agent ShellcodeUrl string / / shellcode下载地址 LoadMethod string AdsMemLoad 参见加载方式选项 加载方法 BindIcon string / / 设置图标(为空不使用) BindFile string / / 文件捆绑(为空不使用) FakeSign string / / 伪造签名(为空不使用) AntiSandBox []string [BeepSleep, HideWindow] 参见反沙箱选项 反沙箱 Platform 支持的平台如下： windows/amd64 windows/arm64 linux/amd64 linux/arm64 macos/amd64 macos/arm64 Compressor 使用gonut转shellcode, 使用-z来指定参数，详细可从这里查阅。 序号 选项 描述 1 None 不压缩 2 aPLib experimental, 速度较慢 3 LZNT1 (RTL) experimental, Windows only 4 Xpress (RTL) experimental, Windows only 5 LZNT1 experimental 6 Xpress experimental LoadMethod [danger] 💤 Will be soon... AntiSandBox 选项 值 BeepSleep延时 BeepSleep 隐藏黑框 HideWindow 系统启动时间是否大于30分钟 BootTime CPU数量是否大于4 CPUCount 是否虚拟机 IsVirtualMachine 检测壁纸MD5 WallPaperMD5 语言是否为中文 Languages 是否为北京时间 TimeZone 桌面文件数量是否大于10 DesktopFileCount 物理内存是否大于8G PhysicalMemory 源文件名和进程名是否相同 ProcessName 微信是否存在 Wechat ... ... Customer UDRL 支持用户自定义功能(要求符合编写规范), 并编译成dll通过sRDI转化为shellcode并注入到牺牲进程中反射执行 go语言模板如下: package main import \"C\" import \"fmt\" // export Hi func Hi(v0, v1 *C.char) *C.char { return C.CString(fmt.Sprintf(\"Hi, %s, here is %s\", C.GoString(v0), C.GoString(v1))) } func main() {} c语言模板如下: #include #include #include void Hi(char *v0, char *v1) { printf(\"Hi, %s, here is %s\\n\", v0, v1); } 使用示例:(加载mimikatz) BOF/COFF 兼容cs的bof, 可按照其要求编写bof来自定义拓展命令库, 编译 x86_64-w64-mingw32-gcc-8.1.0.exe -c .\\Source.c -o timestamp.o -Os -fno-asynchronous-unwind-tables -fno-ident -fpack-struct=8 -falign-functions=1 -s -ffunction-sections -fdata-sections -fno-exceptions -fno-stack-protector -mno-stack-arg-probe 测试示例(详细内容可跳转blog查看): By BKLockly，使用知识共享 署名-相同方式共享 4.0协议发布            更新时间： 2025-01-21 23:49:27 "}}